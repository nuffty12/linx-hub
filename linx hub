-- Simple UI Library (like Rayfield but lighter)
-- Author: You :)

local UILib = {}

-- Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")

-- StarterGui for ScreenGui
local player = Players.LocalPlayer
local gui = Instance.new("ScreenGui")
gui.Name = "StealTimeUI"
gui.ResetOnSpawn = false
gui.Parent = player:WaitForChild("PlayerGui")

-- === WINDOW CREATOR ===
function UILib:Window(title, keybind)
    local window = {}
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 400, 0, 300)
    frame.Position = UDim2.new(0.5, -200, 0.5, -150)
    frame.BackgroundColor3 = Color3.fromRGB(30,30,30)
    frame.BorderSizePixel = 0
    frame.Visible = true
    frame.Parent = gui

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1,0,0,40)
    titleLabel.BackgroundColor3 = Color3.fromRGB(44,120,224)
    titleLabel.Text = title
    titleLabel.TextColor3 = Color3.fromRGB(255,255,255)
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextSize = 18
    titleLabel.Parent = frame

    -- Dragging
    local dragging, dragStart, startPos
    titleLabel.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X,
                                       startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)

    -- Toggle keybind
    UserInputService.InputBegan:Connect(function(input)
        if input.KeyCode == (keybind or Enum.KeyCode.RightControl) then
            frame.Visible = not frame.Visible
        end
    end)

    -- === TAB CREATOR ===
    function window:Tab(tabname)
        local tab = {}
        local tabFrame = Instance.new("Frame")
        tabFrame.Size = UDim2.new(1, -20, 1, -60)
        tabFrame.Position = UDim2.new(0,10,0,50)
        tabFrame.BackgroundTransparency = 1
        tabFrame.Parent = frame

        local layout = Instance.new("UIListLayout")
        layout.Padding = UDim.new(0,5)
        layout.FillDirection = Enum.FillDirection.Vertical
        layout.Parent = tabFrame

        -- BUTTON
        function tab:Button(text, callback)
            local btn = Instance.new("TextButton")
            btn.Size = UDim2.new(1,0,0,35)
            btn.BackgroundColor3 = Color3.fromRGB(50,50,50)
            btn.Text = text
            btn.TextColor3 = Color3.fromRGB(255,255,255)
            btn.Parent = tabFrame
            btn.MouseButton1Click:Connect(function()
                pcall(callback)
            end)
        end

        -- TOGGLE
        function tab:Toggle(text, default, callback)
            local state = default or false
            local btn = Instance.new("TextButton")
            btn.Size = UDim2.new(1,0,0,35)
            btn.BackgroundColor3 = Color3.fromRGB(70,70,70)
            btn.TextColor3 = Color3.fromRGB(255,255,255)
            btn.Text = text .. ": " .. tostring(state)
            btn.Parent = tabFrame

            btn.MouseButton1Click:Connect(function()
                state = not state
                btn.Text = text .. ": " .. tostring(state)
                pcall(callback, state)
            end)
        end

        -- SLIDER
        function tab:Slider(text, min, max, default, callback)
            local val = default or min
            local sliderFrame = Instance.new("Frame")
            sliderFrame.Size = UDim2.new(1,0,0,40)
            sliderFrame.BackgroundColor3 = Color3.fromRGB(60,60,60)
            sliderFrame.Parent = tabFrame

            local label = Instance.new("TextLabel")
            label.Size = UDim2.new(1,0,0.5,0)
            label.Text = text .. ": " .. val
            label.TextColor3 = Color3.fromRGB(255,255,255)
            label.BackgroundTransparency = 1
            label.Parent = sliderFrame

            local bar = Instance.new("Frame")
            bar.Size = UDim2.new(1, -10, 0.3, 0)
            bar.Position = UDim2.new(0,5,0.6,0)
            bar.BackgroundColor3 = Color3.fromRGB(100,100,100)
            bar.Parent = sliderFrame

            local fill = Instance.new("Frame")
            fill.Size = UDim2.new((val-min)/(max-min),0,1,0)
            fill.BackgroundColor3 = Color3.fromRGB(44,120,224)
            fill.Parent = bar

            bar.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    local conn
                    conn = UserInputService.InputChanged:Connect(function(input2)
                        if input2.UserInputType == Enum.UserInputType.MouseMovement then
                            local ratio = math.clamp((input2.Position.X - bar.AbsolutePosition.X) / bar.AbsoluteSize.X,0,1)
                            val = math.floor(min + (max-min)*ratio)
                            fill.Size = UDim2.new(ratio,0,1,0)
                            label.Text = text .. ": " .. val
                            pcall(callback, val)
                        end
                    end)
                    input.Changed:Connect(function()
                        if input.UserInputState == Enum.UserInputState.End then
                            conn:Disconnect()
                        end
                    end)
                end
            end)
        end

        return tab
    end

    return window
end

return UILib
