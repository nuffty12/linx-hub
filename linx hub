-- STS UILib â€” Fully Working Modern UI for Steal Time Simulator
local UILib = {}
UILib.__index = UILib

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Helper function
local function new(class, props)
    local inst = Instance.new(class)
    if props then
        for k,v in pairs(props) do
            if k ~= "Parent" then
                pcall(function() inst[k] = v end)
            end
        end
        if props.Parent then inst.Parent = props.Parent end
    end
    return inst
end

-- Loading screen
function UILib:LoadingScreen(title)
    local screen = new("ScreenGui",{Parent=playerGui})
    local frame = new("Frame",{Size=UDim2.new(0,300,0,150), Position=UDim2.new(0.5,-150,0.5,-75), BackgroundColor3=Color3.fromRGB(30,30,30), Parent=screen})
    new("UICorner",{Parent=frame, CornerRadius=UDim.new(0,10)})
    new("TextLabel",{Parent=frame, Size=UDim2.new(1,0,0,50), BackgroundTransparency=1, Text=title or "Loading STS HUB...", TextColor3=Color3.fromRGB(255,255,255), Font=Enum.Font.GothamBold, TextSize=20})
    local bar = new("Frame",{Parent=frame, Size=UDim2.new(0,0,0,20), Position=UDim2.new(0,0,1,-30), BackgroundColor3=Color3.fromRGB(44,120,224)})
    new("UICorner",{Parent=bar, CornerRadius=UDim.new(0,6)})
    TweenService:Create(bar,TweenInfo.new(1),{Size=UDim2.new(1,0,0,20)}):Play()
    wait(1.1)
    screen:Destroy()
end

-- Window
function UILib:Window(title, accentColor, toggleKey)
    local self = setmetatable({}, UILib)
    accentColor = accentColor or Color3.fromRGB(44,120,224)
    toggleKey = toggleKey or Enum.KeyCode.RightControl

    self.gui = new("ScreenGui",{Parent=playerGui, ResetOnSpawn=false})
    self.main = new("Frame",{Size=UDim2.new(0,500,0,350), Position=UDim2.new(0.5,-250,0.5,-175), BackgroundColor3=Color3.fromRGB(24,24,24), Parent=self.gui})
    new("UICorner",{Parent=self.main, CornerRadius=UDim.new(0,10)})
    new("UIStroke",{Parent=self.main, Color=accentColor, Thickness=2})

    self.titlebar = new("Frame",{Parent=self.main, Size=UDim2.new(1,0,0,36), BackgroundColor3=accentColor})
    new("UICorner",{Parent=self.titlebar, CornerRadius=UDim.new(0,8)})
    new("UIStroke",{Parent=self.titlebar, Color=Color3.new(0,0,0), Thickness=1})
    new("TextLabel",{Parent=self.titlebar, Size=UDim2.new(1,0,1,0), BackgroundTransparency=1, Text=title or "STS HUB", TextColor3=Color3.new(1,1,1), Font=Enum.Font.SourceSansBold, TextSize=20})

    self.tabHolder = new("Frame",{Parent=self.main, Size=UDim2.new(0,140,1,-36), Position=UDim2.new(0,0,0,36), BackgroundColor3=Color3.fromRGB(30,30,30)})
    new("UICorner",{Parent=self.tabHolder, CornerRadius=UDim.new(0,6)})
    self.pageHolder = new("Frame",{Parent=self.main, Size=UDim2.new(1,-140,1,-36), Position=UDim2.new(0,140,0,36), BackgroundTransparency=1})

    self.pages = {}
    self.currentPage = nil

    UserInputService.InputBegan:Connect(function(input, processed)
        if not processed and input.KeyCode == toggleKey then
            self.gui.Enabled = not self.gui.Enabled
        end
    end)

    -- Draggable title
    do
        local dragging, dragStart, startPos
        self.titlebar.InputBegan:Connect(function(input)
            if input.UserInputType==Enum.UserInputType.MouseButton1 then
                dragging=true
                dragStart=input.Position
                startPos=self.main.Position
                input.Changed:Connect(function()
                    if input.UserInputState==Enum.UserInputState.End then dragging=false end
                end)
            end
        end)
        UserInputService.InputChanged:Connect(function(input)
            if dragging and input.UserInputType==Enum.UserInputType.MouseMovement then
                local delta = input.Position - dragStart
                self.main.Position = UDim2.new(startPos.X.Scale,startPos.X.Offset+delta.X,startPos.Y.Scale,startPos.Y.Offset+delta.Y)
            end
        end)
    end

    -- Tab creator
    function self:Tab(tabName)
        local tab = {}
        local tabFrame = new("ScrollingFrame",{Parent=self.pageHolder, Size=UDim2.new(1,0,1,0), BackgroundTransparency=1, ScrollBarThickness=6, CanvasSize=UDim2.new(0,0,0,0), Visible=false})
        local layout = new("UIListLayout",{Parent=tabFrame, Padding=UDim.new(0,6), SortOrder=Enum.SortOrder.LayoutOrder})
        layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            tabFrame.CanvasSize = UDim2.new(0,0,0,layout.AbsoluteContentSize.Y+12)
        end)

        local btn = new("TextButton",{Parent=self.tabHolder, Size=UDim2.new(1,0,0,36), BackgroundColor3=Color3.fromRGB(45,45,45), Text=tabName, TextColor3=Color3.new(1,1,1), Font=Enum.Font.SourceSansBold, TextSize=16})
        new("UICorner",{Parent=btn, CornerRadius=UDim.new(0,6)})
        btn.MouseButton1Click:Connect(function()
            for _,child in ipairs(self.pageHolder:GetChildren()) do
                if child:IsA("ScrollingFrame") then child.Visible=false end
            end
            tabFrame.Visible=true
            self.currentPage=tabFrame
        end)
        if not self.currentPage then tabFrame.Visible=true self.currentPage=tabFrame end

        -- Button
        function tab:Button(text, callback)
            local b = new("TextButton",{Parent=tabFrame, Size=UDim2.new(1,-12,0,36), BackgroundColor3=Color3.fromRGB(60,60,60), Text=text, TextColor3=Color3.new(1,1,1), Font=Enum.Font.SourceSans, TextSize=14})
            new("UICorner",{Parent=b, CornerRadius=UDim.new(0,6)})
            b.MouseButton1Click:Connect(function() pcall(callback) end)
        end

        -- Toggle
        function tab:Toggle(text, default, callback)
            local state=default or false
            local wrapper=new("Frame",{Parent=tabFrame, Size=UDim2.new(1,-12,0,36), BackgroundTransparency=1})
            local label=new("TextLabel",{Parent=wrapper, Size=UDim2.new(0.7,0,1,0), BackgroundTransparency=1, Text=text, TextColor3=Color3.new(1,1,1), Font=Enum.Font.SourceSans, TextXAlignment=Enum.TextXAlignment.Left})
            local tb=new("TextButton",{Parent=wrapper, Size=UDim2.new(0.28,0,0.66,0), Position=UDim2.new(0.72,0,0.17,0), BackgroundColor3=Color3.fromRGB(70,70,70), Text=state and "ON" or "OFF", Font=Enum.Font.SourceSansBold, TextSize=12, TextColor3=Color3.new(1,1,1)})
            new("UICorner",{Parent=tb, CornerRadius=UDim.new(0,6)})
            tb.MouseButton1Click:Connect(function()
                state=not state
                tb.Text=state and "ON" or "OFF"
                pcall(callback,state)
            end)
        end

        -- Slider
        function tab:Slider(text,min,max,default,callback)
            local val=default or min
            local sliderFrame=new("Frame",{Parent=tabFrame, Size=UDim2.new(1,-12,0,40), BackgroundColor3=Color3.fromRGB(60,60,60)})
            local label=new("TextLabel",{Parent=sliderFrame, Size=UDim2.new(1,0,0.5,0), BackgroundTransparency=1, Text=text..": "..val, TextColor3=Color3.new(1,1,1)})
            local bar=new("Frame",{Parent=sliderFrame, Size=UDim2.new(1,-10,0.3,0), Position=UDim2.new(0,5,0.6,0), BackgroundColor3=Color3.fromRGB(100,100,100)})
            local fill=new("Frame",{Parent=bar, Size=UDim2.new((val-min)/(max-min),0,1,0), BackgroundColor3=Color3.fromRGB(44,120,224)})
            bar.InputBegan:Connect(function(input)
                if input.UserInputType==Enum.UserInputType.MouseButton1 then
                    local conn
                    conn = UserInputService.InputChanged:Connect(function(input2)
                        if input2.UserInputType==Enum.UserInputType.MouseMovement then
                            local ratio=math.clamp((input2.Position.X-bar.AbsolutePosition.X)/bar.AbsoluteSize.X,0,1)
                            val=math.floor(min+(max-min)*ratio)
                            fill.Size=UDim2.new(ratio,0,1,0)
                            label.Text=text..": "..val
                            pcall(callback,val)
                        end
                    end)
                    input.Changed:Connect(function()
                        if input.UserInputState==Enum.UserInputState.End then conn:Disconnect() end
                    end)
                end
            end)
        end

        return tab
    end

    return self
end

return UILib
